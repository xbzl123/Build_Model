apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin

//apply plugin:  'com.tencent.bugly.tinker-support'
//apply from : 'tinker-support.gradle'
//添加插件
//apply plugin: 'me.tatarka.retrolambda'
greendao {
    schemaVersion 1 //数据库版本号
    daoPackage 'databindingtest'// 设置DaoMaster、DaoSession、Dao 包名
    targetGenDir 'src/main/java'//设置DaoMaster、DaoSession、Dao目录
}

//加载资源
//Properties properties = new Properties()
//InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
//properties.load(inputStream)
//读取文件
//def keyfile = properties.getProperty('/home/long/raysharp4multiversion.keystore')
def keyfile = new File('/home/long/test.jks')
android {
    compileSdkVersion 29
    defaultConfig {

        applicationId "com.example.root.build_model"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
//        resConfigs( "zh-rCN","zh")
        ndk{
//            moduleName "com_example_root_build_model_MainActivity_ProcessHandler"
            abiFilters("armeabi")
        }
        sourceSets.main {
            jni.srcDirs = []//disable automatic ndk-build call
            jniLibs.srcDir "src/main/jni"
        }
    }
    dexOptions {
        jumboMode = true
        preDexLibraries false
        javaMaxHeapSize "2g"

        additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=60000',//每个包内方法数上限
                                '--main-dex-list='+projectDir+'/multiDexKeep.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
//        debug {
//            keyAlias '123456'
//            keyPassword '123456'
//            storeFile file('/home/long/test.jks')
//            storePassword '123456'
//        }
        release {
            keyAlias '123456'
            keyPassword '123456'
            storeFile file('/home/long/test.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            debuggable true
            zipAlignEnabled true
            debuggable true
            minifyEnabled false //是否混淆
            shrinkResources false //是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyfile.exists()) {
                signingConfig signingConfigs.debug
            }
        }
        release {
            debuggable true
            zipAlignEnabled true
            debuggable true
            minifyEnabled false //是否混淆
            shrinkResources false //是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyfile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    //    classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    implementation 'androidx.multidex:multidex:2.0.0'
//    implementation 'com.android.support:support-v4:29.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    implementation 'com.facebook.stetho:stetho:1.3.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    implementation 'com.orhanobut:hawk:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    // GreenDAO
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'org.greenrobot:greendao-generator:3.1.0'
    // add library
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    // Okhttp库
    implementation 'com.squareup.okhttp3:okhttp:3.1.2'
    // Retrofit库
    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    //对gson的支持
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    //对rxjava的适配
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    // Dagger2
    implementation 'com.google.dagger:dagger:2.7'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
    // Butterknife
//    implementation 'com.jakewharton:butterknife:8.5.1'
//    annotationProcessor "com.jakewharton:butterknife-compiler:8.5.1"
    //动态权限申请工具
    // permissionsdispatcher
    implementation('com.github.hotchemi:permissionsdispatcher:3.1.0') {
        exclude module: "support-v13"
    }
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:3.1.0'
    implementation 'com.squareup.okio:okio:2.1.0'
//    implementation files('libs/jsoup-1.10.3.jar')
//    implementation files('libs/fastjson-1.2.32.jar')
    implementation 'io.apisense:rhino-android:1.0'
    implementation 'com.github.bumptech.glide:glide:3.5.2'
    //bugly
    implementation 'androidx.multidex:multidex:2.0.0'

    implementation 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    annotationProcessor("com.tinkerpatch.tinker:tinker-android-anno:1.9.11")
    compileOnly 'com.tinkerpatch.tinker:tinker-android-anno:1.9.11'
    implementation 'com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.11'
    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:1.6.2"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.6.2"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:1.6.2"
//    implementation 'com.alibaba:fastjson:1.1.54.android'
//    implementation 'com.alibaba:fastjson:1.2.56'

    implementation 'com.google.zxing:core:3.2.1'
    implementation 'cn.bingoogolapple:bga-qrcodecore:1.1.3@aar'
    implementation 'cn.bingoogolapple:bga-zxing:1.1.3@aar'
    implementation 'com.blankj:utilcode:1.14.3'
    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor "com.jakewharton:butterknife-compiler:10.2.3"
}


//获取版本号
def verCode() {
    def versionPropsFile = file("../gradle.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        int verCode = versionProps['VERSION_CODE'].toInteger()
        return verCode
    } else {
        throw new GradleException("Could not read gradle.properties")
    }
}

//获取版本名
def verName() {
    def versionPropsFile = file("../gradle.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        return versionProps['VERSION_NAME']
    } else {
        throw new GradleException("Could not read gradle.properties")
    }
}
//preBuild{
//    doLast {
//        def imlFile = file("app.iml")
//                try{
//                    def parsedXml = (new XmlParser()).parse(imlFile)
//                    def jdkNode = parsedXml.component[1].orderEntry.find{it.'@type' == 'jdk'}
//                    parsedXml.component[1].remove(jdkNode)
//                    new Node(parsedXml.component[1],'orderEntry',['type':'jdk','jdkName':'Android API 27 Platform','jdkType':'Android SDK'])
//                    def writer = new StringWriter()
//                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
//                    imlFile.text = writer.toString()
//                    groovy.xml.XmlUtil.serialize(parsedXml,new FileOutputStream(imlFile))
//                }catch(FileNotFoundException e){
//
//                }
//
//    }
//}